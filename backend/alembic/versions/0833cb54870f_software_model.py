"""Software Model

Revision ID: 0833cb54870f
Revises: e3ecd40e3851
Create Date: 2024-10-16 23:03:09.901779

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import mapped_column

from model.database import WikibaseSoftwareVersionModel, WikibaseSoftwareModel


# revision identifiers, used by Alembic.
revision: str = "0833cb54870f"
down_revision: Union[str, None] = "e3ecd40e3851"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "wikibase_software",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "software_type",
            sa.Enum(
                "SOFTWARE", "SKIN", "EXTENSION", "LIBRARY", name="wikibasesoftwaretype"
            ),
            nullable=False,
        ),
        sa.Column("software_name", sa.String(), nullable=False),
        sa.Column("url", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("latest_version", sa.String(), nullable=True),
        sa.Column("quarterly_download_count", sa.Integer(), nullable=True),
        sa.Column("public_wiki_count", sa.Integer(), nullable=True),
        sa.Column("mw_bundled", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "software_type", "software_name", name="unique_software_type_name"
        ),
    )

    op.create_table(
        "wikibase_software_tag",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("tag", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )

    op.create_table(
        "wikibase_software_tag_xref",
        sa.Column("wikibase_software_id", sa.Integer(), nullable=False),
        sa.Column("wikibase_software_tag_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["wikibase_software_id"],
            ["wikibase_software.id"],
            name="foreign_wikibase_software_id",
        ),
        sa.ForeignKeyConstraint(
            ["wikibase_software_tag_id"],
            ["wikibase_software_tag.id"],
            name="foreign_wikibase_software_tag_id",
        ),
        sa.PrimaryKeyConstraint("wikibase_software_id", "wikibase_software_tag_id"),
    )

    with op.batch_alter_table("wikibase_software_version") as batch_op:
        batch_op.add_column(
            sa.Column("wikibase_software_id", sa.Integer(), nullable=True)
        )
        batch_op.create_foreign_key(
            "software", "wikibase_software", ["wikibase_software_id"], ["id"]
        )

    select_cte = (
        sa.text(
            "SELECT id, software_name, software_type FROM wikibase_software_version"
        )
        .columns(
            WikibaseSoftwareVersionModel.id,
            mapped_column("software_name", sa.String, nullable=False),
            mapped_column("software_type", sa.String, nullable=False),
        )
        .cte()
    )
    insert_query = sa.insert(WikibaseSoftwareModel).from_select(
        [WikibaseSoftwareModel.software_type, WikibaseSoftwareModel.software_name],
        sa.select(select_cte.c.software_type, select_cte.c.software_name)
        .group_by(select_cte.c.software_type, select_cte.c.software_name)
        .order_by(select_cte.c.software_type, select_cte.c.software_name),
    )
    op.execute(insert_query)

    software_id_subq = (
        sa.select(
            WikibaseSoftwareModel.id.label("software_id"),
            select_cte.c.id.label("software_version_id"),
        )
        .join(
            select_cte,
            onclause=sa.and_(
                WikibaseSoftwareModel.software_name == select_cte.c.software_name,
                WikibaseSoftwareModel.software_type == select_cte.c.software_type,
            ),
        )
        .subquery()
    )
    update_query = sa.update(WikibaseSoftwareVersionModel).values(
        software_id=(
            sa.select(software_id_subq.c.software_id)
            .where(
                WikibaseSoftwareVersionModel.id
                == software_id_subq.c.software_version_id,
            )
            .scalar_subquery()
        )
    )
    op.execute(update_query)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("wikibase_software_version") as batch_op:
        batch_op.drop_constraint("software", type_="foreignkey")
        batch_op.drop_column("wikibase_software_id")
    op.drop_table("wikibase_software_tag_xref")
    op.drop_table("wikibase_software_tag")
    op.drop_table("wikibase_software")
    # ### end Alembic commands ###
